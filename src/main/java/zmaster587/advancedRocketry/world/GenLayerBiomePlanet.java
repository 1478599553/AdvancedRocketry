package zmaster587.advancedRocketry.world;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

import cpw.mods.fml.common.FMLCommonHandler;
import net.minecraft.util.MathHelper;
import net.minecraft.util.WeightedRandom;
import net.minecraft.world.WorldType;
import net.minecraft.world.biome.BiomeGenBase;
import net.minecraft.world.gen.layer.GenLayer;
import net.minecraft.world.gen.layer.IntCache;
import net.minecraftforge.common.BiomeDictionary;
import net.minecraftforge.common.BiomeManager;
import net.minecraftforge.common.BiomeManager.BiomeEntry;

public class GenLayerBiomePlanet extends GenLayer {

	private List<BiomeGenBase> biomes;
	private static List<BiomeEntry> biomeEntries;

	int biomeLimiter = -1;

	public GenLayerBiomePlanet(long p_i2122_1_, GenLayer p_i2122_3_, WorldType worldType)
	{
		super(p_i2122_1_);

		this.parent = p_i2122_3_;

		biomeEntries = new ArrayList<BiomeManager.BiomeEntry>();
		
	}

	//Used to set the usableBiomes
	public static void setupBiomesForUse(List<BiomeEntry> entries) {
		biomeEntries = entries;
	}
	
	/**
	 * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
	 * amounts, or biomeList[] indices based on the particular GenLayer subclass.
	 * @param properties 
	 */
	public int[] getInts(int p_75904_1_, int p_75904_2_, int p_75904_3_, int p_75904_4_)
	{
		//int[] aint = this.parent.getInts(p_75904_1_, p_75904_2_, p_75904_3_, p_75904_4_);
		int[] aint1 = IntCache.getIntCache(p_75904_3_ * p_75904_4_);

		Random random = new Random(p_75904_3_ * p_75904_4_);

		for (int i1 = 0; i1 < p_75904_4_; ++i1)
		{
			for (int j1 = 0; j1 < p_75904_3_; ++j1)
			{
				this.initChunkSeed((long)(j1 + p_75904_1_), (long)(i1 + p_75904_2_));
				//int k1 = aint[j1 + i1 * p_75904_3_];
				//int l1 = (k1 & 3840) >> 8;
			//k1 &= -3841;
			
			
			//TODO: debug
			 /*if (isBiomeOceanic(k1))
             {
                 aint1[j1 + i1 * p_75904_3_] = k1;
             }
             else if (k1 == BiomeGenBase.mushroomIsland.biomeID)
             {
                 aint1[j1 + i1 * p_75904_3_] = k1;
             }
             else*/
			
			
            	 aint1[j1 + i1 * p_75904_3_] = getWeightedBiomeEntry().biome.biomeID;
             /*else if (k1 == 1)
             {
                 if (l1 > 0)
                 {
                     if (this.nextInt(3) == 0)
                     {
                         aint1[j1 + i1 * p_75904_3_] = BiomeGenBase.mesaPlateau.biomeID;
                     }
                     else
                     {
                         aint1[j1 + i1 * p_75904_3_] = BiomeGenBase.mesaPlateau_F.biomeID;
                     }
                 }
                 else
                 {
                     aint1[j1 + i1 * p_75904_3_] = getWeightedBiomeEntry().biome.biomeID;
                 }
             }
             else if (k1 == 2)
             {
                 if (l1 > 0)
                 {
                     aint1[j1 + i1 * p_75904_3_] = BiomeGenBase.jungle.biomeID;
                 }
                 else
                 {
                     aint1[j1 + i1 * p_75904_3_] = getWeightedBiomeEntry().biome.biomeID;
                 }
             }
             else if (k1 == 3)
             {
                 if (l1 > 0)
                 {
                     aint1[j1 + i1 * p_75904_3_] = BiomeGenBase.megaTaiga.biomeID;
                 }
                 else
                 {
                     aint1[j1 + i1 * p_75904_3_] = getWeightedBiomeEntry().biome.biomeID;
                 }
             }
             else if (k1 == 4)
             {
                 aint1[j1 + i1 * p_75904_3_] = getWeightedBiomeEntry().biome.biomeID;
             }
             else
             {
                 aint1[j1 + i1 * p_75904_3_] = BiomeGenBase.mushroomIsland.biomeID;
             }*/
			}
		}

		//TODO: DEBUG:
		Arrays.fill(aint1, 256);
		
		return aint1;
	}

	protected BiomeEntry getWeightedBiomeEntry()
	{
		if(biomeEntries == null || biomeEntries.isEmpty())
			return new BiomeEntry(BiomeGenBase.ocean, 100);
		
		List<BiomeEntry> biomeList = biomeEntries;
		int totalWeight = WeightedRandom.getTotalWeight(biomeList);
		int weight = nextInt(totalWeight / 10) * 10;
		return (BiomeEntry)WeightedRandom.getItem(biomeList, weight);
	}
}
