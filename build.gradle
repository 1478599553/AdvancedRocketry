buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}

plugins {
  id "com.gradle.build-scan" version "1.9"
  id "com.matthewprenger.cursegradle" version "1.1.0"
  id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.64"
  //id "net.kyori.blossom" version "1.1.0"
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

apply from: "gradle/scripts/getbuildnumber.gradle"
apply from: "gradle/scripts/version.gradle"

group= "zmaster587.advancedRocketry" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "AdvancedRocketry"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: 'snapshot', version: '20170624-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

apply from: "gradle/scripts/deps.gradle"

apply from: "gradle/scripts/jars.gradle"

import org.apache.tools.ant.filters.ReplaceTokens

processResources
{
    // this will ensure that this task is redone when the versions change.
    /*inputs.property "version", project.version
    inputs.property "mcversion", mcversion
    inputs.project "@MAJOR@", project.version_major
    inputs.project "@MINOR@", project.version_minor
    inputs.project "@REVIS@", project.version_revis
    inputs.project "@build@", project.getBuildNumber()
    inputs.project "%LIBVULPESVERSION%", project.libVulpesVersion*/



    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        /*include 'mcmod.info'
        include 'AdvancedRocketry.java'*/
        filter ReplaceTokens, tokens: [version:project.version, mcversion:mcversion, MAJOR:project.version_major, MINOR:project.version_minor, REVIS:project.version_revis, build:project.getBuildNumber(), LIBVULPESVERSION:project.libVulpesVersion]
                
        // replace version and mcversion
        //expand 'version':project.version, 'mcversion':mcversion, '@MAJOR@':project.version_major, '@MINOR@':project.version_minor, '@REVIS@':project.version_revis, '@build@':project.getBuildNumber(), '%LIBVULPESVERSION%':project.libVulpesVersion
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

curseforge{
  if (project.hasProperty("thecursedkey")) {
        apiKey = project.thecursedkey
    }
    else {
    apiKey = ""
    }
  project {
  //AdvancedRocketry
    id = "236542"
    relations {
        requiredDependency 'libvulpes'
    }
    changelog = file('changelog.html')
    changelogType = 'html'
    releaseType = "beta"
    addGameVersion mcversion
    mainArtifact(jar) {
      displayName = "AdvancedRocketry ${project.version} build " + project.getBuildNumber() +  " for " + mcversion
    }
    addArtifact (deobfJar){
         displayName = "AdvancedRocketry ${project.version}-deobf build " + project.getBuildNumber() + " for " + mcversion
    }
   }
}

// Commented out until jenkins supports newer verisons of java
task makeChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = new File ("changelog.html")
    untaggedName = "Current release ${project.version}"
    
    //Get the last commit from the cache or config if no cache exists
    File newFile = rootProject.file('lasthash.txt')
    if (!newFile.exists()) fromCommit = startGitRev
    else fromCommit = newFile.text.trim()
    
    //get the latest commit and write it to the cache file
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    newFile.delete()
    newFile << stdout.toString().trim()
    
    toRef =  "HEAD"
    gitHubIssuePattern = "nonada123";
    templateContent = """
{{#tags}}
  <h3>{{name}}</h3>
  <ul>
    {{#commits}}
    <li> <a href="https://github.com/zmaster587/AdvancedRocketry/commit/{{hash}}" target=_blank> {{{message}}}</a>
</li>
    {{/commits}}
  </ul>
{{/tags}}
"""
}

tasks.build.dependsOn makeChangelog

/*buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service' 
    licenseAgree = 'yes'                                        

    publishAlways() 

    if (System.getenv('CI')) {
        tag 'CI'
    } else {
        tag 'Local'
    }

    //tag System.getProperty('os.name')                                            
}*/



/*dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2854'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "examplemod",
            "Specification-Vendor": "examplemodsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
*/